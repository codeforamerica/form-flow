plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java-library'
    id 'maven-publish'
    id 'java'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'jacoco'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id "org.flywaydb.flyway" version "9.22.1"
}

jacoco {
    toolVersion = '0.8.10'
}

targetCompatibility = JavaVersion.VERSION_17
sourceCompatibility = JavaVersion.VERSION_17

group = "org.codeforamerica.platform"
version = "0.0.14-SNAPSHOT"
ext.admin = System.getenv("SONATYPE_USERNAME")
def localEnv = new Properties()
if (file(".env").isFile()) {
    file(".env").withInputStream { localEnv.load(it) }
}
def sonatypeUsername = localEnv.getProperty("SONATYPE_USERNAME") ?: System.getenv("SONATYPE_USERNAME")
def sonatypePassword = localEnv.getProperty("SONATYPE_PASSWORD") ?: System.getenv("SONATYPE_PASSWORD")

jar {
    doFirst {
        fileTree(dir: "$buildDir/libs", include: '*.jar').each { file ->
            if (!file.name.contains(version)) {
                file.delete()
            }
        }
    }
    manifest {
        attributes "Main-Class": "formflow.library.ScreenController"
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

bootJar {
    enabled = false
}

task webjar(type: Jar, dependsOn: "jar") {
    from(fileTree("dist")) {
        into "META-INF/resources"
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    api 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.integration:spring-integration-ws:6.1.3'
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-60:3.5.3'
    implementation 'javax.persistence:javax.persistence-api:2.2'
    implementation 'org.flywaydb:flyway-core:9.22.3'
    implementation 'org.webjars.npm:dropzone:5.9.3'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.364'
    implementation 'com.smartystreets.api:smartystreets-java-sdk:3.14.0'
    implementation 'org.apache.pdfbox:pdfbox:3.0.0'
    implementation 'org.yaml:snakeyaml:2.2'
    implementation 'com.mailgun:mailgun-java:1.0.9'
    implementation 'com.google.crypto.tink:tink:1.11.0'
    implementation 'org.springframework.session:spring-session-jdbc'

    // For M1 issue?
    //runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.97.Final:osx-aarch_64'
    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.jsoup:jsoup:1.16.1'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    // bonigarcia seems to need this version of client5, as of version 5.3.2.
    // aws-java-sdk-s3 uses version httpclient:4.5.13, so if we see any differences in testing going forward
    // we should take a look at this dependency and see if it's really testing things correctly and
    // monitor the dependencies.
    testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
    testImplementation 'io.github.bonigarcia:webdrivermanager:5.5.3'
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'org.seleniumhq.selenium:selenium-java'
    testImplementation 'org.postgresql:postgresql'
    testImplementation 'org.projectlombok:lombok:1.18.30'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.11.0'
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            artifactId = "form-flow"
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = "Form Flow Builder"
                description = "A Java library placed in a Spring Boot app to generate form flows."
                url = "https://github.com/codeforamerica/form-flow/"
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/git/git-scm.com/main/MIT-LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'cy-cfa'
                        name = 'Cypress Borg'
                        email = 'cborg@codeforamerica.org'
                    }
                    developer {
                        id = 'luigi'
                        name = 'Luigi Ray-Monta√±ez'
                        email = 'luigi@codeforamerica.org'
                    }
                    developer {
                        id = 'birdprsn'
                        name = 'Alex Gonzalez'
                        email = 'agonzalez@codeforamerica.org'
                    }
                    developer {
                        id = 'cenyia'
                        name = 'Chibuisi Enyia'
                        email = 'cenyia@codeforamerica.org'
                    }
                    developer {
                        id = 'rcastillo'
                        name = 'Rapi Castillo'
                        email = 'rcastillo@codeforamerica.org'
                    }
                    developer {
                        id = 'bethany'
                        name = 'Bethany Seeger'
                        email = 'bseeger@codeforamerica.org'
                    }
                     developer {
                        id = 'vrajmohan'
                        name = 'Vraj Mohan'
                        email = 'vraj@codeforamerica.org'
                    }
                     developer {
                        id = 'marthapidcock'
                        name = 'Martha Pidcock'
                        email = 'mpidcock@codeforamerica.org'
                    }
                }
                scm {
                    url = 'scm:git:https://github.com/codeforamerica/form-flow.git'
                }
            }
        }
    }
}

signing {
    required { admin }
    def signingKey = System.getenv("GPG_SIGNING_KEY")
    def signingPassword = System.getenv("GPG_SIGNING_PASSPHRASE")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

nexusPublishing {
    repositories {
        sonatype {
            if (version.endsWith("-SNAPSHOT")) {
                println("Using a SNAPSHOT: ${version}")
            } else {
                println("Using a release version: ${version}")
            }
            nexusUrl = uri("https://oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://oss.sonatype.org/content/repositories/snapshots")
            username = sonatypeUsername
            password = sonatypePassword
        }
    }
}

 javadoc {
     options.addStringOption('Xmaxwarns', '1000')
 }
