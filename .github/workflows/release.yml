name: Create Release
on:
  release:
    types:
      - released
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        type: string
        required: true
      sonatypeUsername:
        description: 'Sonatype username'
        type: string
        required: true
      sonatypePassword:
        description: 'Sonatype password'
        type: string
        required: true
      gpgKeyName:
        description: 'GPG key name'
        type: string
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: form-flow-test
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: form-flow-test
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Use faketty to allow for GPG signing
        uses: Yuri6037/Action-FakeTTY@v1.1
      - name: Hide sensitive inputs
        uses: levibostian/action-hide-sensitive-inputs@v1
        with:
          exclude_inputs: version
      - name: Checkout
        uses: actions/checkout@v3
        with: # take this out when you're done testing so it uses the release instead!
          ref: ${{ inputs.version }}
          fetch-depth: 0
      - name: Update version in build.gradle
        run: | # TODO: switch out inputs.version with github.event.release.tag_name when you're done testing!
            echo "Updating version in build.gradle to ${{ inputs.version }}"
            sed -i 's/version = "\(.*\)"/version = "${{ inputs.version }}"/' build.gradle
            cat build.gradle
            echo "${{ secrets.PLATFORM_ROBOT_GPG_PRIVATE_KEY }}" > private_key.asc
            echo "${{ secrets.PLATFORM_ROBOT_GPG_PASSPHRASE }}" | gpg --batch --pinentry-mode loopback --passphrase-fd 0 --import private_key.asc
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: 'gradle'
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build and test with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean jar
      - name: Update version
        run: | # switch out inputs.version with latest release when you're done testing!
          echo "Updating version in build.gradle to ${{ inputs.version }}"
          sed -i 's/version = "\(.*\)"/version = "${{ inputs.version }}"/' build.gradle
      - name: Set env
        run: echo "GRADLE_PUBLISH_KEY=$(echo "${{ secrets.PLATFORM_ROBOT_GPG_PRIVATE_KEY }}" | grep -v '\-\-' | grep -v '=.' | tr -d '\n')"
      - name: Prepare Gradle Publish properties
        run: |
          echo "gradle.publish.key=$GRADLE_PUBLISH_KEY" >> ~/.gradle/gradle.properties
          echo "gradle.publish.secret=${{ secrets.PLATFORM_ROBOT_GPG_PASSPHRASE }}" >> ~/.gradle/gradle.properties
      - name: Publish to Sonatype
        run: |
          cat <(echo -e "${{ secrets.PLATFORM_ROBOT_GPG_PRIVATE_KEY }}") | gpg --batch --import
#          gpg --export-secret-keys --armor ${{ inputs.gpgKeyName }}
          ./gradlew publish --no-daemon --no-parallel
        env:
          ORG_GRADLE_PROJECT_VERSION_NAME: ${{ inputs.version }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.PLATFORM_ROBOT_GPG_PRIVATE_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.PLATFORM_ROBOT_GPG_PASSPHRASE }}
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ inputs.sonatypeUsername }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ inputs.sonatypePassword }}
          GPG_TTY: $(tty)

